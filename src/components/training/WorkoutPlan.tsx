import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Dumbbell, Clock, Target, TrendingUp } from "lucide-react";
import { advancedWorkouts } from "@/data/advancedWorkouts";
import { LoadManager } from "./LoadManager";

interface Exercise {
  name: string;
  sets: number;
  reps: string;
  videoUrl: string;
  tip: string;
  equipment?: string;
}

interface WorkoutDay {
  day: string;
  focus: string;
  exercises: Exercise[];
}

interface WorkoutPlanProps {
  goal: string;
  workoutDays: WorkoutDay[];
  trainingLocation: string;
  experience: string;
}

export function WorkoutPlan({ goal, workoutDays, trainingLocation, experience }: WorkoutPlanProps) {
  const getGoalText = () => {
    switch (goal) {
      case 'perder-peso':
        return 'Perder Peso';
      case 'ganhar-massa':
      case 'ganhar-musculos':
        return 'Ganhar Massa Muscular';
      case 'corrigir-postura':
        return 'Corrigir Postura';
      case 'ganhar-peso':
        return 'Ganhar Peso';
      case 'manter-peso':
        return 'Manter Peso';
      default:
        return 'Personalizado';
    }
  };

  const getLocationText = () => {
    switch (trainingLocation) {
      case 'academia':
        return 'Academia';
      case 'casa':
        return 'Em Casa';
      case 'ar-livre':
        return 'Ao Ar Livre';
      default:
        return trainingLocation;
    }
  };

  const getExperienceText = () => {
    switch (experience) {
      case 'iniciante':
        return 'Iniciante';
      case 'intermediario':
        return 'Intermedi√°rio';
      case 'avancado':
        return 'Avan√ßado';
      default:
        return experience;
    }
  };

  // Get advanced workouts if user is intermediate or advanced
  const getAdvancedWorkouts = () => {
    if ((experience === 'intermediario' || experience === 'avancado') && 
        advancedWorkouts[experience] && 
        advancedWorkouts[experience][goal] && 
        advancedWorkouts[experience][goal][trainingLocation]) {
      return advancedWorkouts[experience][goal][trainingLocation];
    }
    return workoutDays;
  };

  const finalWorkoutDays = getAdvancedWorkouts();

  const getDifficultyScore = () => {
    switch (experience) {
      case 'iniciante': return 30;
      case 'intermediario': return 70;
      case 'avancado': return 95;
      default: return 50;
    }
  };

  const getIntensityColor = () => {
    const score = getDifficultyScore();
    if (score >= 90) return 'bg-red-500';
    if (score >= 70) return 'bg-orange-500';
    if (score >= 50) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getMethodologyDescription = () => {
    if (experience === 'avancado') {
      return "Treino cient√≠fico com t√©cnicas avan√ßadas: cluster sets, rest-pause, tempo sob tens√£o, pr√©-exaust√£o e volume alem√£o.";
    } else if (experience === 'intermediario') {
      return "Progress√£o sistem√°tica com t√©cnicas intermedi√°rias, foco em sobrecarga progressiva e varia√ß√µes de exerc√≠cios.";
    }
    return "Base s√≥lida de movimentos fundamentais com progress√£o gradual.";
  };

  // Get location-specific instructions
  const getTrainingLocationInstructions = () => {
    switch (trainingLocation) {
      case 'academia':
        return (
          <>
            <li>Utilize m√°quinas e equipamentos espec√≠ficos para melhorar o isolamento muscular</li>
            <li>Execute com amplitude completa dos movimentos para maior ativa√ß√£o muscular</li>
            <li>Utilize t√©cnicas avan√ßadas como drop-sets e super-sets quando indicado</li>
            <li>Ajuste corretamente as m√°quinas para sua altura e propor√ß√µes corporais</li>
            {experience === 'avancado' && (
              <>
                <li>Implemente t√©cnicas de intensidade: rest-pause, cluster sets, tempo sob tens√£o</li>
                <li>Use acess√≥rios como correntes e el√°sticos para resist√™ncia acomodante</li>
                <li>Monitore RPE (taxa de esfor√ßo percebido) em cada s√©rie</li>
              </>
            )}
          </>
        );
      case 'casa':
        return (
          <>
            <li>Utilize m√≥veis est√°veis como cadeiras e mesas para apoio quando necess√°rio</li>
            <li>Improvise pesos com garrafas d'√°gua, mochilas ou outros objetos</li>
            <li>Foque na correta execu√ß√£o e controle dos movimentos</li>
            <li>Utilize varia√ß√µes mais desafiadoras dos exerc√≠cios para aumentar a intensidade</li>
          </>
        );
      case 'ar-livre':
        return (
          <>
            <li>Utilize o ambiente e mobili√°rio p√∫blico como apoio (bancos, barras, etc)</li>
            <li>Realize atividades cardiovasculares entre os exerc√≠cios para maior queima cal√≥rica</li>
            <li>Adapte os exerc√≠cios conforme as condi√ß√µes clim√°ticas</li>
            <li>Traga el√°sticos ou outros equipamentos leves para aumentar a resist√™ncia</li>
          </>
        );
      default:
        return (
          <>
            <li>Adapte os exerc√≠cios ao ambiente dispon√≠vel</li>
            <li>Foque na execu√ß√£o correta e controle da respira√ß√£o</li>
            <li>Ajuste a intensidade conforme sua capacidade atual</li>
          </>
        );
    }
  };

  return (
    <Card className="w-full animate-fade-in">
      <CardHeader>
        <div className="flex justify-between items-start mb-4">
          <CardTitle className="text-xl text-corpoideal-purple flex items-center">
            <Dumbbell className="h-5 w-5 mr-2" />
            Plano de Treino {experience === 'avancado' ? 'Cient√≠fico' : 'Personalizado'}
          </CardTitle>
          <div className="flex gap-2 flex-wrap">
            <Badge variant="outline">{getGoalText()}</Badge>
            <Badge variant="secondary">{getLocationText()}</Badge>
            <Badge variant="secondary">{getExperienceText()}</Badge>
          </div>
        </div>

        {/* Intensity and Methodology Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="bg-gray-50 p-3 rounded-lg">
            <div className="flex items-center mb-2">
              <Target className="h-4 w-4 mr-2 text-corpoideal-purple" />
              <span className="text-sm font-medium">Intensidade</span>
            </div>
            <Progress value={getDifficultyScore()} className="h-2 mb-1" />
            <span className="text-xs text-gray-600">{getDifficultyScore()}% - {experience}</span>
          </div>

          <div className="bg-gray-50 p-3 rounded-lg">
            <div className="flex items-center mb-2">
              <Clock className="h-4 w-4 mr-2 text-corpoideal-purple" />
              <span className="text-sm font-medium">Dura√ß√£o Estimada</span>
            </div>
            <span className="text-sm font-bold">
              {experience === 'avancado' ? '90-120 min' : experience === 'intermediario' ? '60-90 min' : '45-60 min'}
            </span>
          </div>

          <div className="bg-gray-50 p-3 rounded-lg">
            <div className="flex items-center mb-2">
              <TrendingUp className="h-4 w-4 mr-2 text-corpoideal-purple" />
              <span className="text-sm font-medium">Frequ√™ncia</span>
            </div>
            <span className="text-sm font-bold">
              {finalWorkoutDays.length} dias/semana
            </span>
          </div>
        </div>

        <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg">
          <h4 className="text-sm font-medium text-corpoideal-purple mb-1">Metodologia Aplicada:</h4>
          <p className="text-xs text-gray-700">{getMethodologyDescription()}</p>
        </div>
      </CardHeader>

      <CardContent>
        <Tabs defaultValue={finalWorkoutDays[0]?.day.toLowerCase()}>
          <TabsList className="grid grid-cols-7 mb-4">
            {finalWorkoutDays.map((day) => (
              <TabsTrigger key={day.day} value={day.day.toLowerCase()}>
                {day.day.charAt(0)}
              </TabsTrigger>
            ))}
          </TabsList>
          
          {finalWorkoutDays.map((day) => (
            <TabsContent key={day.day} value={day.day.toLowerCase()} className="space-y-4">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium text-lg">{day.day}</h3>
                <div className="text-right">
                  <span className="text-sm text-corpoideal-purple font-medium">Foco: {day.focus}</span>
                  <p className="text-xs text-gray-500">{day.exercises.length} exerc√≠cios</p>
                </div>
              </div>
              
              <div className="space-y-4">
                {day.exercises.map((exercise, index) => (
                  <div key={index} className="workout-card p-4 border border-gray-200 rounded-lg hover:border-corpoideal-purple/30 transition-colors">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex-1">
                        <div className="flex items-center mb-1">
                          <span className="bg-corpoideal-purple text-white text-xs rounded-full w-5 h-5 flex items-center justify-center mr-2">
                            {index + 1}
                          </span>
                          <h4 className="font-medium text-sm">{exercise.name}</h4>
                        </div>
                        {exercise.equipment && (
                          <span className="text-xs text-gray-500 block ml-7">
                            üìã {exercise.equipment}
                          </span>
                        )}
                      </div>
                      <div className="text-right">
                        <span className="text-sm text-corpoideal-purple font-bold bg-corpoideal-purple/10 px-2 py-1 rounded">
                          {exercise.sets} x {exercise.reps}
                        </span>
                      </div>
                    </div>
                    
                    <div className="ml-7">
                      <p className="text-xs text-gray-600 mb-3 leading-relaxed">
                        üí° <strong>T√©cnica:</strong> {exercise.tip}
                      </p>
                      
                      <LoadManager exerciseName={exercise.name} />
                      
                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full text-xs hover:bg-corpoideal-purple hover:text-white transition-colors mt-2"
                        onClick={() => window.open(exercise.videoUrl, '_blank')}
                      >
                        üé• Ver demonstra√ß√£o t√©cnica
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6 p-4 bg-gradient-to-r from-corpoideal-purple/5 to-blue-50 rounded-lg border border-corpoideal-purple/20">
                <h4 className="text-sm font-bold text-corpoideal-purple mb-3 flex items-center">
                  <Target className="h-4 w-4 mr-2" />
                  Orienta√ß√µes Espec√≠ficas - {day.focus}:
                </h4>
                <ul className="text-sm text-gray-700 space-y-2 pl-4 list-disc">
                  {experience === 'avancado' ? (
                    <>
                      <li>Descanso estrat√©gico: 2-4 minutos para exerc√≠cios compostos, 60-90s para isolados</li>
                      <li>RPE alvo: 8-9 nas s√©ries principais (deixar 1-2 reps na reserva)</li>
                      <li>Aplicar t√©cnicas de intensidade conforme prescrito (rest-pause, clusters, etc.)</li>
                      <li>Periodiza√ß√£o: aumentar volume/intensidade a cada 2-3 semanas</li>
                      <li>Aquecimento espec√≠fico obrigat√≥rio: 5-8 minutos</li>
                      {getTrainingLocationInstructions()}
                    </>
                  ) : experience === 'intermediario' ? (
                    <>
                      <li>Descanso: 90-120 segundos entre s√©ries de exerc√≠cios compostos</li>
                      <li>Foque na sobrecarga progressiva: aumente peso/reps semanalmente</li>
                      <li>Execute amplitude completa em todos os movimentos</li>
                      <li>Controle da fase exc√™ntrica (descida): 2-3 segundos</li>
                      <li>T√©cnica perfeita √© prioridade sobre carga m√°xima</li>
                      {getTrainingLocationInstructions()}
                    </>
                  ) : (
                    <>
                      <li>Descanso de 60-90 segundos entre as s√©ries</li>
                      <li>Execute os movimentos com controle e boa forma</li>
                      <li>Aumente a carga progressivamente conforme sentir facilidade</li>
                      <li>Consumo de prote√≠na ap√≥s o treino √© recomendado</li>
                      {getTrainingLocationInstructions()}
                    </>
                  )}
                </ul>

                {experience === 'avancado' && (
                  <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <h5 className="text-xs font-bold text-red-700 mb-1">‚ö†Ô∏è AVISO - Treino Avan√ßado:</h5>
                    <p className="text-xs text-red-600">
                      Este protocolo √© baseado em evid√™ncias cient√≠ficas e requer experi√™ncia pr√©via. 
                      Monitore sinais de overtraining e ajuste o volume conforme recupera√ß√£o.
                    </p>
                  </div>
                )}
              </div>
            </TabsContent>
          ))}
        </Tabs>

        {/* Scientific References for Advanced Users */}
        {experience === 'avancado' && (
          <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
            <h4 className="text-sm font-bold text-gray-800 mb-2">üìö Embasamento Cient√≠fico:</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>‚Ä¢ Volume Alem√£o: Bompa & Haff (2009) - Periodization Theory</li>
              <li>‚Ä¢ Rest-Pause: Haff & Triplett (2015) - Essentials of Strength Training</li>
              <li>‚Ä¢ Cluster Sets: Tufano et al. (2017) - Sports Medicine</li>
              <li>‚Ä¢ Tempo sob Tens√£o: Schoenfeld (2010) - Journal of Strength & Conditioning</li>
              <li>‚Ä¢ Pr√©-exaust√£o: Brennecke et al. (2009) - Applied Physiology</li>
            </ul>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
